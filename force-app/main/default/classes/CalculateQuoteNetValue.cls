/* CalculateQuoteNetValue

    This class is used to calculate the net value charged to customer exclusive of VAT at given point of time. 
    In theory this value matches with bill value figure generated by NBBS Interface logic.
    After VAT changes there are many parameters we need to think of while performing this calculation that is why
    we have reused the same logic again in this class.
    
    This class is invoked in below two scenarios:
    
    --> When we plan the job or when allocated job recieves the matching quote from big machines
    --> We dont trigger this logic when installation date on the job is blank or when there is hours mismatch
        in case of pre-allocation or when we plan downtime or remedial jobs.
        Reason for this is downtime or remedial jobs are created as part of ASP submission.
    --> When we change the installation date on the job
    --> When we submit the ASP
    
*/

public with sharing class CalculateQuoteNetValue {
    
   private  Double newVat1;
   private  Double newVat4;
   private  Double oldVat1;
   private  Double oldVat4;
   private  String overwritestring = System.Label.VAT_Change_Date;
   private  Date overwrite = date.valueOf(overwritestring);
   private  Date billingoverride;
   private  Map<string, Decimal> newvatBands = new Map<string, Decimal>();
   private  Map<string, Decimal> oldvatBands = new Map<string, Decimal>();
   
   // This method is used for calculating the net price charged to customer without VAT.
   // It uses the same logic which is used in NBBS Interface from Salesforce.
 
   public void calculateQuoteNetValueForCustomer (List<BigMachines_Quote__c> quoteList){

		try
        {  
            this.populateVATRates();   
            Boolean newchange;
            Boolean nochange; 
            String BillType; 
            Double oldbilltotal = 0.0;
            Double newbillTotal = 0.0;
            Double newVAT1Amount = 0.0;
            Double oldVAT1Amount = 0.0;  
            Double newmismatch = 0.0;
            String billperiod; 
            Double newisdifference = 0.00;
            Double netPriceChargedToCustomer = 0.0;
            List<BigMachines_Quote__c> bmQuotesToUpdate = new List<BigMachines_Quote__c>();
            List<Job__c> jobList = new List<Job__c>();
     
           
            for (BigMachines_Quote__c Quote:quoteList){
                
                System.debug('Iterating through the quote : '+Quote.Name);
                
                // Initialize all the variable at the start of every iteration.
                
                jobList = Quote.Jobs__r;
                
                if(jobList.size()==0){
                	
                	continue;
                	
                }
                    
                newchange = false;
                nochange = false;
                oldbilltotal = 0.0;
                newbillTotal = 0.0;
                newVAT1Amount = 0.0;
                oldVAT1Amount = 0.0;
                Date tempinstalldate;
                Date Actualinstallationdate;
                Actualinstallationdate = getLowestInstallationDate(Quote.Jobs__r);
                Decimal VAT17 = 0.0;
                Decimal VAT5 = Quote.VAT_4_Total_Amount_For_Net_Price_Calc__c;
                Decimal discount = 0.0;
                Decimal newdiscount = 0.0;
                newmismatch = 0.0;
                billperiod = Quote.Opportunity__r.Bill_Period__c;
                Double newvat17 =0.0;
                
                // As per the requirement we need to exclude few packs from this calculation thats why we have created two new roll
                // up summary fields which roll up the VAT1 and VAT4 amounts of required packs into VAT_1_Total_Amount_For_Net_Price_Calc__c &
                // VAT_4_Total_Amount_For_Net_Price_Calc__c field in big machines quote object.
                // We use these two field in this class rather than using the same roll up summary fields which are used in NBBS logic.
                
                newvat17 = (Quote.VAT_1_Total_Amount_For_Net_Price_Calc__c/(1+oldVat1)+ ((Quote.VAT_1_Total_Amount_For_Net_Price_Calc__c/(1+oldVat1))*(newVat1))).setscale(2);
                
                newisdifference = 0.00;
              
                if(Quote.ISpec_Difference__c !=null && Quote.ISpec_Difference__c>0.00 ){
                    
                    newisdifference = ((Quote.ISpec_Difference__c/(1+oldVat1))+((Quote.ISpec_Difference__c/(1+oldVat1))*(newVat1))).setscale(2);
                    
                 }
                              
                if(billperiod == 'After  04/01' ||((Actualinstallationdate >= overwrite && Quote.closeDate__c < overwrite) && (billperiod != 'Before 04/01'))){
                    
                    newchange =true;
                    
                    if(Quote.newPriceMatchDifference__c != null ||Quote.newPriceMatchDifference__c>=0.0){
                        
                        newmismatch = Quote.newPriceMatchDifference__c;
                        
                    }else if(Quote.priceMatchDifference__c !=null || Quote.priceMatchDifference__c>=0.0){
                        
                        newmismatch = ((Quote.priceMatchDifference__c/(1+oldVat1))+ ((Quote.priceMatchDifference__c/(1+oldVat1))*newVat1)).setscale(2);
                        
                    }
                    
                 }
              
                 tempinstalldate = getLowestInstallationDate(Quote.Jobs__r);
              
                 if((Quote.closeDate__c >= overwrite)&& (tempinstalldate >= overwrite) ){
                    
                    nochange =true;
                    
                 }
            
                 if(Quote.Opportunity__r.Installation_Date_Billing__c != null)
                
                     billingoverride = date.valueOf(Quote.Opportunity__r.Installation_Date_Billing__c); 
              

                 if(((Actualinstallationdate >= overwrite && Quote.closeDate__c < overwrite) || newchange)&& (billperiod != 'Before 04/01')){
                    
                        if(newvat17 >0){
                            
                            system.debug('Inside New VAT');
                            
                            if(newmismatch >0 && newisdifference >0){
                                
                                VAT17 = newvat17 + newisdifference + newmismatch;
                                
                            }else if (newmismatch >=0 && newisdifference <=0){
                                
                                VAT17 = newvat17 + newmismatch;
                                
                            }else if (newmismatch <=0 && newisdifference >=0){
                                
                                VAT17 = newvat17 + newisdifference;
                                
                            }else
                            
                                VAT17=   newvat17 ;
                                
                        }
                     
                }

                else {
                    
                    if(Quote.VAT_1_Total_Amount_For_Net_Price_Calc__c >0){
                        
                    if(Quote.priceMatchDifference__c >0 && Quote.ISpec_Difference__c >0){
                        
                        VAT17 = Quote.VAT_1_Total_Amount_For_Net_Price_Calc__c + Quote.ISpec_Difference__c + Quote.priceMatchDifference__c;
                        
                    }else if (Quote.priceMatchDifference__c >=0 && Quote.ISpec_Difference__c <=0){
                        
                        VAT17 = Quote.VAT_1_Total_Amount_For_Net_Price_Calc__c + Quote.priceMatchDifference__c;
                        
                    }else if (Quote.priceMatchDifference__c <=0 && Quote.ISpec_Difference__c >=0){
                        
                        VAT17 = Quote.VAT_1_Total_Amount_For_Net_Price_Calc__c + Quote.ISpec_Difference__c;
                        
                    }else
                    
                        VAT17=   Quote.VAT_1_Total_Amount_For_Net_Price_Calc__c ;
                        
                    }
                    
                }
                
                if(((Actualinstallationdate >= overwrite && Quote.closeDate__c < overwrite) || newchange)&& (billperiod != 'Before 04/01')){
                    
                    if(Quote.discountsTotalOnPricing__c >=0){
                        
                            if(newmismatch <= 0 && newisdifference >=0){
                                
                                discount = (Quote.discountsTotalOnPricing__c -(newmismatch)) ;
                                
                            }else if(newmismatch >= 0 && newisdifference<=0){
                                
                                discount = (Quote.discountsTotalOnPricing__c -(newisdifference));
                                
                            }else if(newmismatch <= 0 && newisdifference <=0){
                                
                                discount = (Quote.discountsTotalOnPricing__c - newisdifference - newmismatch);
                                
                            }else
                            
                                discount = Quote.discountsTotalOnPricing__c ;
                                
                        }
                        
                    
                    }
             else{
                
                if(Quote.discountsTotalOnPricing__c >=0){
                    
                    if(Quote.priceMatchDifference__c <= 0 && Quote.ISpec_Difference__c>=0){
                        
                        discount = (Quote.discountsTotalOnPricing__c -(Quote.priceMatchDifference__c)) ;
                        
                    }else if(Quote.priceMatchDifference__c >= 0 && Quote.ISpec_Difference__c<=0){
                        
                        discount = (Quote.discountsTotalOnPricing__c -(Quote.ISpec_Difference__c));
                        
                    }else if(Quote.priceMatchDifference__c <= 0 && Quote.ISpec_Difference__c <=0){
                        
                        discount = (Quote.discountsTotalOnPricing__c -Quote.ISpec_Difference__c-Quote.priceMatchDifference__c);
                        
                    }else
                    
                        discount = Quote.discountsTotalOnPricing__c ;
                        
                }
              }

                if(newchange ||nochange){
                    
                       netPriceChargedToCustomer  = (((((VAT17+Quote.ASP_Discounts__c)/ (1+newVat1))* 100)).round()+ (((VAT5 / (1+newVat4))*100)).round())-((discount/(1+newVat1))*100).round();
                       
                } else{
                    
                       netPriceChargedToCustomer   = (((((VAT17+Quote.ASP_Discounts__c)/ (1+oldVat1))* 100)).round()+ (((VAT5 / (1+oldVat4))*100)).round())-((discount/(1+oldVat1))*100).round();
                       
                }
                
                System.debug('Quote Name is : '+Quote.Name+' and netPriceChargedToCustomer is : '+netPriceChargedToCustomer);
                
                System.debug('Value of nochange is : '+nochange+' and value of newchange is : '+newchange);
                
                netPriceChargedToCustomer = netPriceChargedToCustomer / 100.00;
                
                Quote.Net_Price_Charged_To_Customer__c = netPriceChargedToCustomer;
                
                bmQuotesToUpdate.add(Quote);
                
            
            }
            
            if(bmQuotesToUpdate.size()>0){
            	
                cls_IsRun.setDontFireTriggers();
                // ++ Added for restricting the creation/updation of customer category & history records starts
                cls_IsRun.setisRestrictCustCategory();
                // --Added for restricting the creation/updation of customer category & history records starts 
                update bmQuotesToUpdate;
                
            }
            
       }catch(Exception excp){
           
              System.debug('An exception occured: '+excp);
           
       }

   }
   
 // This method is used for populating different VAT bands from VAT Rate object.  
   
  private void populateVATRates(){
       
      List<VAT_Codes__c> lstVAT = [Select Vat_Code_1_Value__c,Vat_Code_4_Value__c,VAT_Code_1__c,VAT_Code_4__c,VAT_Code_4_Rate__c,VAT_Code_3__c,Status__c,start_date__c,
                                    VAT_Code_3_Rate__c,end_date__c,VAT_Code_2_Rate__c,VAT_Code_2__c,VAT_Code_1_Rate__c from VAT_Codes__c];
                                    
       for(VAT_Codes__c objvat:lstVAT){
        
            if(objvat.start_date__c >= overwrite){
                
                if(objvat.VAT_Code_1__c !=null)
                        newvatBands.put(objvat.VAT_Code_1__c, objvat.VAT_Code_1_Rate__c);
                if(objvat.VAT_Code_4__c !=null)
                        newvatBands.put(objvat.VAT_Code_4__c, objvat.VAT_Code_4_Rate__c);
                        
                
            }else if (objvat.start_date__c < overwrite){
                
                if(objvat.VAT_Code_1__c !=null)
                        oldvatBands.put(objvat.VAT_Code_1__c, objvat.VAT_Code_1_Rate__c);
                if(objvat.VAT_Code_4__c !=null)
                        oldvatBands.put(objvat.VAT_Code_4__c, objvat.VAT_Code_4_Rate__c);
                        
            }
            
       }
       
       newVat1 = (newvatBands.get('1'))/100;
       newVat4 = (newvatBands.get('4'))/100;
       oldVat1 = (oldvatBands.get('1'))/100;
       oldVat4 = (oldvatBands.get('4'))/100;
   
     }

 // This method is used for returning lowest installation date from the list of jobs passed into this method.  
 
  private Date getLowestInstallationDate(List<Job__c> lstJobs){
    
        Date jobInstalationDate = lstJobs[0].Installation_Date__c;
        
        for(integer i=0; i < lstJobs.size(); i++){
              
            if(lstJobs[i].Installation_Date__c < jobInstalationDate){
                
                jobInstalationDate = lstJobs[i].Installation_Date__c;
                
            }
            
        }
        
        return jobInstalationDate;
              
    }

 // This method is used for returning largest created date from the list of jobs passed into this method.  
  
  private Datetime getjobinputdate(List<Job__c> lstJobs){
    
        Datetime jobInputDate = lstJobs[0].createddate;
        
        for(integer i=0; i < lstJobs.size(); i++){  
            
            if(lstJobs[i].createddate > jobInputDate){
                
                jobInputDate = lstJobs[i].createddate;
                
            }
        }
        
        return jobInputDate;
              
    }

}