<apex:page doctype="html-5.0" standardcontroller="Appointment__c" extensions="cscfga.UISupport,UISupport" showHeader="true" sidebar="true">

    <cscfga:FixUIStyles />

    <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.cscfga__Configuration_css)}"></link>
    <apex:stylesheet value="{!URLFOR($Resource.cscfga__select2,'select2.min.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.cscfga__Indicator,'css/indicator.css')}"></apex:stylesheet>
    <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.keypad, 'jquery.keypad.css')}"></link>

    <input type="hidden" id="CS_finance_template_BG_URL" value="{!$Resource.finance_template_BG_MOD}"/>
    <input type="hidden" id="CS_finance_template_SG_URL" value="{!$Resource.finance_template_SG_MOD}"/>

    <style type="text/css">
        .lookupInput img.deleteIcon, .lookupInput div.deleteIcon {
            background-image: url({!URLFOR($Resource.cscfga__delete_icon)});
        }
    </style>

    <style type="text/css">
        .lookupInput {
            position: absolute;
        }
        
        .visible {
            display: block !important;
        }

        .requiredOff {
            display: none;
        }

        

        #popupOverlay {
            display: none;
            position: absolute;
            left: 0;
            padding-top: 100px;
            right: 0;
            top: 0;
            bottom: 0;
        }

        #lookupContainer {
            background: #fff;
            border: 2px #000 solid;
            height: 480px;
            margin: 0 auto;
            padding: 2px;
            width: 800px;
        }

        #lookupContainer iframe {
            border: none;
        }

        .lookupInput img.deleteIcon {
            background-image: url({!URLFOR($Resource.cscfga__delete_icon)});
            background-position: 0 -16px;
            height: 16px;
            width: 16px;
            margin: 2px 2px 0 6px;
            position: relative;
            float: left;
            cursor: pointer;
        }

        .lookupInput img.deleteIcon:hover {
            background-position: 0 -32px;
        }

        [data-cs-action="copyRelatedProduct"]{
            display: none;
        }
    </style>

    <div id="indicatorContainer" style="top: 0;bottom: 0;right: 0;left: 0;position: absolute; display:none;">{!$Label.cscfga__embscr_Loading}</div>

    <div id="screensList" style="margin: 8px 0 16px" />

    <div id="CSValidationMessageBox" class="message warningM3" style="display: none">
        <table border="0" cellpadding="0" cellspacing="0" class="messageTable" style="padding:0px;margin:0px;">
            <tr valign="top">
                <td>
                    <img alt="WARNING" class="msgIcon" src="/s.gif" title="WARNING" />
                </td>
                <td class="messageCell">
                    <div class="messageText">
                        <h4>Warning:</h4>
                        <span id="CSValidationMessage"></span>
                    </div>
                </td>
            </tr>
            <tr>
                <td></td>
                <td></td>
            </tr>
        </table>
    </div>

    <div id="CSInfoMessageBox" class="message infoM3" style="display: none">
        <table border="0" cellpadding="0" cellspacing="0" class="messageTable" style="padding:0px;margin:0px;">
            <tr valign="top">
                <td>
                    <img alt="INFO" class="msgIcon" src="/s.gif" title="INFO" />
                </td>
                <td class="messageCell">
                    <div class="messageText">
                        <div id="CSInfoMessage"></div>
                    </div>
                </td>
            </tr>
            <tr>
                <td></td>
                <td></td>
            </tr>
        </table>
    </div>
    
    <div id="configurationContainer" /> 

    <script type="text/javascript" src="{!URLFOR($Resource.cscfga__jshashtable)}" />
    <script type="text/javascript" src="{!URLFOR($Resource.cscfga__jQuery_min)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.cscfga__jquery_numberformatter)}" />
    <script type="text/javascript" src="{!URLFOR($Resource.cscfga__Underscore)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.cscfga__select2,'select2.min.js')}" />
    <script type="text/javascript" src="{!URLFOR($Resource.cscfga__datejs,'date-en-GB.min.js')}" />
    <script type="text/javascript" src="{!URLFOR($Resource.cscfga__cs_js)}/require.js"/>

    <script type="text/javascript">
        require.config({
            baseUrl: '{!JSENCODE(URLFOR($Resource.cscfga__cs_js))}',
            map: {
                '*': {
                    'bower_components/q/q': 'node_modules/q/q'
                }
            }
        });
    </script>
    <script type="text/javascript" src="{!URLFOR($Resource.cscfga__cs_online)}"></script>
    <script type="text/javascript">
        // override for function "cont"
        function cont() {
            var validationResult = CS.Service.validateCurrentConfig(true);
            var ref = CS.Service.getCurrentConfigRef();
            var currentConfig = CS.Service.config[ref].config;
        
            if (validationResult.isValid) {
                currentConfig[CS.Util.configuratorPrefix + 'Configuration_Status__c'] = 'Valid';
            } else {
                currentConfig[CS.Util.configuratorPrefix + 'Configuration_Status__c'] = 'Invalid';
            }
            saveRelated();
        }
    </script>
<!--
    <script type="text/javascript" src="{!URLFOR($Resource.jspdf_plugin_png_support_zlib)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.jspdf_plugin_png_support_png)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.jspdf_deflate_deflate)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.jspdf)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.jspdf_plugin_add_image)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.jspdf_plugin_png_support)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.jspdf_file_saver)}"></script>
-->
    <script type="text/javascript" src="{!URLFOR($Resource.moment)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.keypad, 'jquery.keypad.js')}"></script>
   
    <script type="text/javascript" src="{!URLFOR($Resource.CS_dbQueries)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.CS_partsModel)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.CS_partsModelSupport)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.CS_pricing)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.CS_allowances)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.CS_quotePdf)}"></script> 
   
    <script type="text/javascript"> 
        if (navigator.appName == 'Microsoft Internet Explorer' ||  !!(navigator.userAgent.match(/Trident/) || navigator.userAgent.match(/rv 11/)) || jQuery.browser.msie == 1) {
            jQuery('head').append('<style type="text/css"> .requiredOn{ height: 19px !important; }</style>');
        }
    </script>
    
    <script>
        (function() {
            if(navigator.device){}
            else {
                // hide the buttons on the online
                jQuery('head').append('<style type="text/css"> #btn-quotepdf-preprinted, #btn-quotepdf, #btn-asbestos, #btn-customer-confirmation-form {display: none;}</style>');
                
                var windowOnload = window.onload;
                window.onload = function() {
                    if (windowOnload) windowOnload();
                    
                    // This binds the days of the datepicker to save the value to a configurator attribute.
                    jQuery('#datePicker').on('click', '.calDays .weekday, .calDays .weekend', function(event) {
                        setTimeout(function() {
                            CS.setAttributeValue(DatePicker.datePicker.myElement.attributes['data-cs-binding'].value, DatePicker.datePicker.myElement.value);
                        }, 10);
                    });
                    
                    CS.enableLoadingOverlay();
                    
                    // This enables the input date picker to select the years 90 years in the past. 
                    // It checks whether or not it is inside the iPad so it does not modify the iPad's datepicker.
                    var select = document.getElementById('calYearPicker');
                    if (!select) return;
                    select.innerHTML = '';
                    var startYear = new Date().getFullYear() - 90;
                    for (var year = startYear; year < startYear + 100; year++) {
                        select.options[select.options.length] = new Option(year, year);
                    }
                    
                    // this method binds to the customer date of birth so that the year part in the datepicker is today - 18 years
                    jQuery('body').on('focus', 'input[name="Customer_Date_of_Birth_0"]', function() {
                        setTimeout(function() {
                            var select = document.getElementById('calYearPicker');
                            if (!select) return;
                            select.innerHTML = '';
                            var startYear = new Date().getFullYear() - 90;
                            for(var year = startYear; year < startYear + 90 - 17; year++) {
                                select.options[select.options.length] = new Option(year, year);
                            }
                            select.options[select.options.length-1].selected = true;
                        }, 200);
                    });
                    
                    // this method rebuilds the datepicker, resets it to the default value
                    jQuery('body').on('focusout', 'input[name="Customer_Date_of_Birth_0"]', function() {
                        setTimeout(function() {
                            var select = document.getElementById('calYearPicker');
                            if (!select) return;
                            select.innerHTML = '';
                            var startYear = new Date().getFullYear() - 90;
                            for(var year = startYear; year < startYear + 100; year++) {
                                select.options[select.options.length] = new Option(year, year);
                            }
                        }, 200);
                    });
                }
            }
        }());
    </script>
   
    <script type="text/javascript">
       var params = {
            basketId: '{!JSENCODE(basketId)}',
            configId: '{!JSENCODE(configId)}',
            definitionId: '{!JSENCODE(definitionId)}',
            linkedId: '{!JSENCODE(linkedId)}',
            retURL: '{!JSENCODE(retURL)}',
            packageSlotId: '{!JSENCODE(packageSlotId)}',
            isDtp: '{!JSENCODE(isDtp)}',
            screenflow: '{!JSENCODE(screenFlowName)}',
            communitiesPrefix: '{!JSENCODE(communitiesPrefix)}',
            userProfile: '{!JSENCODE(userProfileName)}'
        };

        if(params.linkedId.indexOf('/') === 0) {
            params.linkedId = params.linkedId.substring(1);
        }   

        if (jQuery.browser.msie) {
            jQuery(document).ready(function() {
                jQuery('body').append('<div id="popupOverlay"><div id="lookupContainer"></div></div>');
            });
        }

        require(['./src/cs-full'], function() {

            CS.Log.setLevel('WARN'); //EP added

            
            CS.App.Components.Repository.addComponent('configurator', 'MultipleRelatedProduct', jQuery('#CS\\.MultipleRelatedProduct__tpl')[0]);
            CS.App.Components.Repository.addComponent('configurator', 'MultiSelectLookup', jQuery('#CS\\.MultiSelectLookup__tpl')[0]);

            function customErrorHandler(message) {
                if (CS && CS.Log && typeof CS.Log.error === 'function') {
                    CS.Log.error(message);
                }
                if (window.alert) {
                    window.alert(message);
                }
                jQuery('#configurationContainer').html('<h1>' + message + '</h1>');
                if (CS && CS.indicator && CS.indicator.stop) {
                    CS.indicator.stop();
                }
            }

            var delegate = {
                errorHandler: function(e) {
                    customErrorHandler(e);
                },

                getLinkedObjectId: function() { 
                    var linkedId = '{!JSENCODE(linkedId)}';
                    if(linkedId.indexOf('/') === 0) {
                        linkedId = linkedId.substring(1);
                    }
                    return linkedId;
                },

                getUserProfileName: function() { return '{!JSENCODE(userProfileName)}'; },

                getScreenFlowNameParameter: function() { return '{!JSENCODE(screenFlowName)}'; },

                loadConfiguration: function(id, definitionId, callback) {
                    Visualforce.remoting.Manager.invokeAction(
                        'cscfga.UISupport.getProductConfiguration',
                        id,
                        function(result, event) {
                            try {
                                var configData = JSON.parse(result);
                                callback(definitionId, configData, 'cscfga.UISupport.loadLookupRecord');
                            } catch (e) {
                                CS.Log.error('Could not load product configuration id ' + id + ': ' + e.message);
                            }
                        },
                        {escape: false}
                    );
                },

                loadProductTemplateHtml: function(id, screenFlowName, callback) {
                    if (typeof screenFlowName === 'function') {
                        callback = screenFlowName;
                        screenFlowName = '';
                    }
                    var json = Visualforce.remoting.Manager.invokeAction(
                        'cscfga.UISupport.getProductTemplate',
                        id, screenFlowName, template,
                        function(result, event) {
                            if (event.status) {
                                callback(JSON.parse(result).html);
                            } else {
                                callback(new Error(event.message));
                            }
                        },
                        {escape: false}
                    );
                },

                loadDefinition: function(id, callback) {
                    var json = Visualforce.remoting.Manager.invokeAction(
                        'cscfga.UISupport.getProductModel',
                        id,
                        function(result, event) {
                            if (event.status) {
                                callback(JSON.parse(result));
                            } else {
                                customErrorHandler(event.message);
                            }
                        },
                        {escape: false}
                    );
                },

                loadLinkedObjectProperties: function(linkedId, productDefinitionId, callback) {
                    var json = Visualforce.remoting.Manager.invokeAction(
                        'cscfga.UISupport.getLinkedObjectProperties',
                        linkedId, productDefinitionId,
                        function(result, event) {
                            callback(JSON.parse(result));
                        },
                        {escape: false}
                    );
                },

                loadScreenflowPredicates: function(productDefinitionId, callback) {
                    var json = Visualforce.remoting.Manager.invokeAction(
                        'cscfga.UISupport.getScreenflowPredicateFunctions',
                        productDefinitionId,
                        function(result, event) {
                            if (event.status) {
                                callback(JSON.parse(result));
                            } else {
                                customErrorHandler(event.message);
                            }
                        },
                        {escape: false}
                    );
                },

                // Evaluates the screen flow predicates on the server for the
                // new root configuration created from definition which has
                // screenflows with predicates associated with it
                evaluateScreenFlowPredicates: function(productDefinitionId, linkedId, callback) {
                    Visualforce.remoting.Manager.invokeAction(
                        'cscfga.UISupport.evaluateScreenFlowPredicates',
                        productDefinitionId, linkedId,
                        function(result, event) {
                            if (event.status) {
                                callback(result);
                            } else {
                                callback(new Error(event.message));
                            }
                        },
                        {escape: false}
                    );
                },

                lookupQuery: cscfga.UISupport.lookupQuery,

                loadRelatedProductSelectionData: function(params, callback) {
                    var json = Visualforce.remoting.Manager.invokeAction(
                        'cscfga.UISupport.getRelatedProductSelectionData',
                        params,
                        function(result, event) {
                            callback(result);
                        },
                        {escape: false}
                    );
                },

                loadLookupRecord: function(params, callback) {
                    var json = Visualforce.remoting.Manager.invokeAction(
                        'cscfga.UISupport.loadLookupRecord',
                        params,
                        function(result, event) {
                            callback(result);
                        },
                        {escape: false}
                    );
                },

                loadCustomLookupReferencedAttributes: function(productDefinitionId, callback) {
                    var json = Visualforce.remoting.Manager.invokeAction(
                        'cscfga.UISupport.loadCustomLookupReferencedAttributes',
                        productDefinitionId,
                        function(result, event) {
                            callback(JSON.parse(result));
                        },
                        {escape: false}
                    );
                },

                getSelectListLookup: function(params, callback) {
                    var json = Visualforce.remoting.Manager.invokeAction(
                        'cscfga.UISupport.getSelectListLookup',
                        JSON.stringify(params), '', '', '',
                        function(result, event) {
                            callback(result, event);
                        },
                        {escape: false}
                    );
                },

                storeConfiguration: function(payload, callback) {
                    // custom naming of baskets for BG
                    var payloadObj = JSON.parse(payload);
                    var quoteRef = CS.getAttributeValue('Quote_Reference_0');
                    var totalPrice = CS.getAttributeValue('Total_Price_Payable_0');
                    if(quoteRef && payloadObj && payloadObj[0] && payloadObj[0][0] && payloadObj[0][0].Name) {
                        payloadObj[0][0].Name = quoteRef;
                    }
                    
                    if(totalPrice && payloadObj && payloadObj[0] && payloadObj[0][0]) {
                        payloadObj[0][0].cscfga__Total_Price__c = totalPrice;
                    }
                   
                    payload = JSON.stringify(payloadObj);
                    Visualforce.remoting.Manager.invokeAction(
                        'cscfga.UISupport.storeConfigs',
                        payload,
                        function(result, event) {
                            if (event.status) {
                                result._success = true;
                            } else {
                                if (!result) {
                                    result = {};
                                }
                                result._success = false;
                                result._message = event.message;
                            }
                            callback(result, function redirect() {
                                window.location.href = CS.params.retURL;
                            });
                        }
                    );
                }
            },

            template = '{!JSENCODE(template)}' || 'cscfga__StandardOnlineTemplate';

            CS.Settings = {};

            CS.Labels = {
                "selectlistlookup_Please_select_value" : "{!$Label.cscfga__selectlistlookup_Please_select_value}",
                "selectlistlookup_Please_enter_search" : "{!$Label.cscfga__selectlistlookup_Please_enter_search}",
                "attrcls_The_maximum_number_of" : "{!$Label.cscfga__attrcls_The_maximum_number_of}",
                "pchlpcls_exceeded_related_items" : "{!$Label.cscfga__pchlpcls_exceeded_related_items}"
            };

            CS.DataBinder.registerHandler('Numeric Keypad', (function UI_NumericKeypad() {
                function refreshTemplate(binding) {
                    var tpl = jQuery('#CS\\.NumericKeypad__tpl')[0],
                        ref = binding.wrapper.reference,
                        html = CS.Util.template(tpl.innerHTML, {ref: ref}),
                        parentEl = jQuery(binding.element).parent(),
                        dataType = binding.wrapper.definition.cscfga__Data_Type__c;

                    jQuery(parentEl).html(html);
                    setTimeout(function() {
                        if (ref) {
                            ref = ref.replace(/:/g, '\\:');
                        }


                        //old
                        //binding.element = jQuery(parentEl).find('#' + ref).get(0);

                        //new
                        binding.element = jQuery(parentEl).find('#' + ref);
                        if (binding.element && binding.element.get()) { // attr is on screen

                        
                            handler.updateUI(binding, false);

                            if ((dataType === 'Decimal') || (dataType === 'Double')) {
                                jQuery(binding.element).keypress(function(e) {
                                    if (e.which === 8) {
                                        // permit backspace keypress
                                    } else if (e.which === 13) {
                                        e.preventDefault();
                                        e.stopPropagation();
                                        e.target.blur();
                                    } else if ((e.which < 48 || e.which > 57) && (e.which != 46)) { // Decimal point should be permitted for fields of data type Decimal and Double
                                        e.preventDefault();
                                        e.stopPropagation();
                                    }
                                });
                            } else {
                                jQuery(binding.element).keypress(function(e) {
                                    if (e.which === 8) {
                                        // permit backspace keypress
                                    } else if (e.which === 13) {
                                        e.preventDefault();
                                        e.stopPropagation();
                                        e.target.blur();
                                    } else if (e.which < 48 || e.which > 57) {
                                        e.preventDefault();
                                        e.stopPropagation();
                                    }
                                });       
                            }                                  

                            jQuery(binding.element).change((function(binding, ref) {
                                return function(e) {
                                    binding.dataBinder.update(ref, {value: e.target.value});
                                };
                            }(binding, binding.wrapper.reference)));
                        }
                    }, 50);
                }

                var handler = {
                    name: 'Numeric Input',

                    init: function(binding) {
                        refreshTemplate(binding);
                    },

                    updateUI: function(binding, triggerEvent) {
                        var displayHandler = {
                            updateDisplay: function(element, value, displayValue) {
                                jQuery(element).val(displayValue);
                            },

                            markRequired: CS.UI.Effects.markRequired,

                            clearValidation: function(element) {
                                jQuery(element).parents('[data-role="fieldcontain"]').removeClass('attributeError').find('.attributeErrorMessage').remove();
                            },

                            showValidation: function(element) {
                                var wrapper = binding.wrapper,
                                    el,
                                    msg;

                                if (wrapper.validationError) {
                                    el = jQuery(element);
                                    msg = wrapper.validationMessage || 'Please correct this entry';
                                    var errorContainer = el.parents('[data-role="fieldcontain"]').addClass('attributeError').find('p.attributeErrorMessage');
                                    if (errorContainer.size() === 0) {
                                        el.parents('[data-role="fieldcontain"]').append('<p class="attributeErrorMessage">' + msg + '</p>');
                                    } else {
                                        errorContainer.text(msg);
                                    }
                                } else {
                                    this.clearValidation(element);
                                }
                            }
                        };

                        CS.UI.Effects.processEffects(binding, displayHandler);
                        if (triggerEvent) el.change();
                    },

                    updateAttribute: function(wrapper, properties) {
                        if (properties.hasOwnProperty('value')) {
                            properties.displayValue = properties.value;
                        }
                        CS.DataBinder.applyProperties(wrapper, properties);
                    }
                };
                
                return handler;
            })());

            CS.DataBinder.registerHandler('MultiSelect Lookup With Quantity', (function UI_MultiSelectLookupWithQuantity() {

                function doMultiRowLookup(lookupConfigId, productDefinitionId, dynamicFilterMap) {
                    function _doQuery(payload) {
                        return new Promise(function(resolve, reject) {

                            cscfga.UISupport.getSelectListLookup(
                                JSON.stringify(payload),
                                "", "", "",
                                function callback(result, event) {
                                    resolve({
                                        result: result,
                                        event: event
                                    });
                                }
                            );
                        });
                    }

                    var MAX_REQUESTS = 1; // every request fetches 25 records
                    var payload = {
                        "lookupConfigId": lookupConfigId,
                        "searchTerm": "",
                        "pageNo": 0,
                        "productDefinitionId": productDefinitionId,
                        "attributeValueParams": dynamicFilterMap
                    };

                    var promiseArray = [];
                    for (var i = 0; i < MAX_REQUESTS; i++) {
                        payload.pageNo = i;
                        promiseArray.push(_doQuery(payload));
                    }

                    return Promise.all(promiseArray);
                }

                function getDynamicFilterMap(attributeRef, lookupQueryObj) {
                    var prefix = 'cscfga__';
                    var configPrefix = '';
                    var attrAbsoluteReferenceAsId = attributeRef || '';
                    var n = attrAbsoluteReferenceAsId.lastIndexOf(":");
                    if (n !== -1) {
                        configPrefix = attrAbsoluteReferenceAsId.substr(0, n);
                    }

                    var dynamicFilterMap = {};
                    var bConfigAttribute = false;
                    var attrRef;
                    var referencedAttributes = lookupQueryObj ? JSON.parse(lookupQueryObj[prefix + 'Referenced_Attributes__c']) : [];

                    jQuery.each(CS.Service.config, function(i, it) {
                        if (it.attr) {
                            bConfigAttribute = false;
                            attrRef = it.reference;
                            if (configPrefix !== '' && attrRef.lastIndexOf(configPrefix) !== -1) {
                                if (attrRef.substring(n).split(":").length < 3) {
                                    bConfigAttribute = true;
                                }
                            }
                            if (configPrefix === '' && attrRef.lastIndexOf(':') === -1) {
                                bConfigAttribute = true;
                            }
                            if (bConfigAttribute) {
                                var name = it.attr.Name;
                                if (lookupQueryObj === undefined) {
                                    dynamicFilterMap[name] = it.attr[prefix + 'Value__c'];
                                } else {
                                    if (jQuery.inArray(name, referencedAttributes) !== -1) {
                                        dynamicFilterMap[name] = it.attr[prefix + 'Value__c'];
                                    }
                                }
                            }
                        }
                    });

                    if(!_.isEmpty(dynamicFilterMap)) {
                        var retVal = [];
                        for (var key in dynamicFilterMap) {
                            retVal.push(key+'='+dynamicFilterMap[key])
                        }
                        return retVal.join('|');
                    } else {
                        return "";
                    }
                }

                function formatLookupResponse(result) {
                    var records = result.map(function(it) {
                        if (it && it.event && it.event.statusCode === 200) {
                            return it.result.records;
                        }
                    })
                    .filter(Boolean)
                    .reduce(function(acc, curr) {
                        return Object.assign(acc, curr);
                    }, {});

                    if (CS.Service.getCurrentScreen().reference.indexOf('Flue_Solution') != -1) {
                        var columnNames = result[0].result.columnNames.reduce(function(acc, curr) {
                             if (Object.keys(curr) == 'Part_Description__c') { curr['Part_Description__c']='Description';} 
                             else if (Object.keys(curr) == 'Part_Code__c') { curr['Part_Code__c']='Part Code'; } 
                             else if (Object.keys(curr) == 'Length_Equivalent__c') { curr['Length_Equivalent__c']='Equivalent Length'; } 
                             else if (Object.keys(curr) == 'Quantity__c') { curr['Quantity__c']='Min'; } 
                             
                            return Object.assign(acc, curr);
                        }, {});

                        columnNames = _.object(_.without(Object.keys(columnNames), 'Part__c', 'Plume_Managment_Part__c'), _.without(Object.values(columnNames), 'Part', 'Plume Managment Part'));

                        var listColumns = result[0].result.listColumns.reduce(function(acc, curr) {
                            return Object.assign(acc, curr);
                        }, {});

                        listColumns = _.object(_.without(Object.keys(listColumns), 'Part__c', 'Plume_Managment_Part__c'), _.without(Object.values(listColumns), 'Part', 'Plume Managment Part'));


                        var sortedIds = _.pluck(_.sortBy(records, 'quantity__c').reverse(), 'id');
                        var sortedValues = _.sortBy(records, 'quantity__c').reverse();
                        var sortedrecords = _.object(sortedIds, sortedValues);
                        return {
                            records: sortedrecords,
                            columnNames: columnNames,
                            listColumns: listColumns
                        }
                    } else {
                        var columnNames = result[0].result.columnNames.reduce(function(acc, curr) {
                             if (Object.keys(curr) == 'Part_2_Code__c') { curr['Part_2_Code__c']='Part Code';} 
                             else if (Object.keys(curr) == 'Part_2_Description__c') { curr['Part_2_Description__c']='Description';} 
                            return Object.assign(acc, curr);
                        }, {});

                        columnNames = _.object(_.without(Object.keys(columnNames), 'Part_2__c'), _.without(Object.values(columnNames), 'Part'));

                        var listColumns = result[0].result.listColumns.reduce(function(acc, curr) {
                            return Object.assign(acc, curr);
                        }, {});

                        listColumns = _.object(_.without(Object.keys(listColumns), 'Part_2__c'), _.without(Object.values(listColumns), 'Part'));


                        var sortedIds = _.pluck(_.sortBy(records, 'quantity__c').reverse(), 'id');
                        var sortedValues = _.sortBy(records, 'quantity__c').reverse();
                        var sortedrecords = _.object(sortedIds, sortedValues);

                        delete columnNames["Quantity__c"];
                        return {
                            records: sortedrecords,
                            columnNames: columnNames,
                            listColumns: listColumns
                        }
                    }
                }

                function calculateTotalLengthEquivalent(lookupResponse, quantitiesById) {
                    // Calculate Length Equivalent (Plume and Internal)
                    var curQty = 0;
                    var curLen = 0;

                    var totalLen = 0;
                    var plumeLen = 0;

                    for (item in quantitiesById) {

                            curLen = parseFloat(lookupResponse[item]["Length_Equivalent__c"]);
                            console.log("curlen=" + curLen);

                            curQty = parseInt(quantitiesById[item], 10);
                            console.log("curQty=" + curQty);
                            
                            if (lookupResponse[item]["Plume_Managment_Part__c"] == 'true')
                                plumeLen += curLen * curQty;
                            else
                                totalLen += curLen * curQty;
                    }

                    console.log("Internal Length Calculation =" + totalLen);
                    console.log("Plume Kit Length Calculation =" + plumeLen);
                    
                    // Set Attributes
                    if (CS.Service.getCurrentScreen().reference.indexOf('Flue_Solution') != -1) {
                            CS.setAttributeValue("Boiler_0:Flue_0:Total_Length_Equivalent_0", totalLen); 
                            CS.setAttributeValue("Boiler_0:Flue_0:Total_Plume_Kit_Length_0", plumeLen);
                    }

                }

                function populateTemplate(binding, lookupResponse) {
                    if (!lookupResponse) {
                        return;
                    }
                    var quantitiesById;
                    var availableRecords = lookupResponse.records;
                    var selectedRecords = {};


                    var idsArray = [];
                    var valsArray = []; 
                    for (item in availableRecords) {
                        if (CS.Service.getCurrentScreen().reference.indexOf('Flue_Solution') != -1) {
                            idsArray.push(availableRecords[item].Part__c);
                        } else {
                            idsArray.push(availableRecords[item].Part_2__c);
                        }
                        valsArray.push(availableRecords[item]);
                    }
                    var availableRecords =  _.object(idsArray, valsArray);

                    if (binding.wrapper.attr.cscfga__Value__c) {
                        quantitiesById = deserializeValue(binding.wrapper.attr.cscfga__Value__c);
                        var recordIds = Object.keys(quantitiesById);

                        selectedRecords = _.reduce(Object.keys(availableRecords), function(acc, currentId) {

                            if (_.contains(recordIds, currentId)) {
                                acc[currentId] = availableRecords[currentId];
                            } 
                            return acc;
                        }, {});
                    }
                    else if (CS.Service.getCurrentScreen().reference.indexOf('Flue_Solution') != -1 && binding.wrapper.attr.cscfga__Value__c == '' && CS.getAttributeValue("Boiler_0:Flue_0:Arrangement_0") !== '--None--') {
                        selectedRecords = _.reduce(Object.keys(availableRecords), function(acc, currentId) {

                            if (parseInt(availableRecords[currentId].quantity__c, 10)) {
                                acc[currentId] = availableRecords[currentId];
                            } 
                            return acc;
                        }, {});
                        var includedPartsAndQuantities = "";
                            
                        for (var item in availableRecords) {

                            if (parseInt(availableRecords[item].Quantity__c, 10) > 0) {
                                if (includedPartsAndQuantities.length > 0) { 
                                    includedPartsAndQuantities = includedPartsAndQuantities + '|' + availableRecords[item].Part__c + ',' + availableRecords[item].Quantity__c;
                                }
                                else
                                    includedPartsAndQuantities = availableRecords[item].Part__c + ',' + availableRecords[item].Quantity__c;
                            }
                        }
                        quantitiesById = deserializeValue(includedPartsAndQuantities);

                        CS.setAttributeValue("Boiler_0:Flue_0:Flue_Parts_0", includedPartsAndQuantities);
                        
                    } else if (CS.Service.getCurrentScreen().reference.indexOf('Flue_Solution') == -1 && binding.wrapper.attr.cscfga__Value__c == '' && CS.getAttributeValue('Boiler_0:Boiler_0') != '') {
                        selectedRecords = _.reduce(Object.keys(availableRecords), function(acc, currentId) {

                            if (parseInt(availableRecords[currentId].quantity__c, 10)) {
                                acc[currentId] = availableRecords[currentId];
                            } 
                            return acc;
                        }, {});
                        var includedPartsAndQuantities = "";
                        quantitiesById = deserializeValue(includedPartsAndQuantities);

                        CS.setAttributeValue("Boiler_0:Optional_Parts_0", "undefined");
                    }

                    var colp = '';
                    
                    if (CS.Service.getCurrentScreen().reference.indexOf('Flue_Solution') == -1) {
                        if (CS.getAttributeValue('Boiler_0:Boiler_0') != '' && lookupResponse.records && Object.keys(availableRecords).length) {
                            if( CS.getAttributeValue('Boiler_0:isToggled_0')) 
                                colp = 'display:block'; 
                            else 
                                colp = 'display:none';
                            var tpl = jQuery('#CS\\.MultiSelectLookupWithQuantityOptional__tpl')[0];
                            var html = CS.Util.template(CS.App.Components.Repository.decodeHtml(tpl.innerHTML), {
                                attributeName: binding.wrapper.attr['Name'],
                                attributeReference: binding.wrapper.reference,
                                availableRecords: availableRecords,
                                selectedRecords: selectedRecords,
                                columnNames: lookupResponse.columnNames,
                                quantitiesById: quantitiesById,
                                collapsed: colp
                            });
                            binding.element.html(html);
                            jQuery('#multiSelectOptionalId').css('display', 'block');
                        } else {
                            jQuery('#multiSelectOptionalId').css('display', 'none');
                        }
                    } else {
                        calculateTotalLengthEquivalent(availableRecords, quantitiesById);

                        if( CS.getAttributeValue('Boiler_0:Flue_0:isToggled_0')) 
                            colp = 'display:block'; 
                        else 
                            colp = 'display:none';
                        var tpl = jQuery('#CS\\.MultiSelectLookupWithQuantity__tpl')[0];
                        var html = CS.Util.template(CS.App.Components.Repository.decodeHtml(tpl.innerHTML), {
                            attributeName: binding.wrapper.attr['Name'],
                            attributeReference: binding.wrapper.reference,
                            availableRecords: availableRecords,
                            selectedRecords: selectedRecords,
                            columnNames: lookupResponse.columnNames,
                            quantitiesById: quantitiesById,
                            collapsed: colp
                        });
                        binding.element.html(html);
                    }               
                }

                var filterMapCache = {};
                var lookupResponseCache = {};

                function getMultiLookupRecords(attributeRef) {
                    return lookupResponseCache[attributeRef];
                }

                function refreshData(binding, isInit) {
                    var definition = CS.Service ? CS.Service.getParentProductIndex(binding.wrapper.reference).all[binding.wrapper.definitionId] : {};
                    var lookupConfigObj = CS.Service.getProductIndex(definition.cscfga__Product_Definition__c).all[definition.cscfga__Lookup_Config__c];
                    var filterId = lookupConfigObj['cscfga__Filter__c'];
                    var lookupQueryObj = CS.Service.getProductIndex(definition.cscfga__Product_Definition__c).all[filterId];
                    var dynamicFilterMap = '';
                    if (lookupQueryObj) {
                        dynamicFilterMap = urlEncode(getDynamicFilterMap(binding.wrapper.reference, lookupQueryObj));
                    }

                    if (isInit || (dynamicFilterMap !== '' && dynamicFilterMap !== filterMapCache[binding.wrapper.reference])) {
                        if (dynamicFilterMap !== filterMapCache[binding.wrapper.reference] && !isInit) {
                            binding.wrapper.attr.cscfga__Value__c = '';
                        }

                        filterMapCache[binding.wrapper.reference] = dynamicFilterMap;

                        return doMultiRowLookup(
                            definition['cscfga__Lookup_Config__c'],
                            definition['cscfga__Product_Definition__c'],
                            dynamicFilterMap
                        )
                        .then(function(response) {
                            return formatLookupResponse(response);
                        })
                        .then(function(lookupResponse) {
                            lookupResponseCache[binding.wrapper.reference] = lookupResponse;
                            try {
                                populateTemplate(binding, lookupResponse);

                                //el.parents('[data-role="fieldcontain"]').append('<p class="attributeErrorMessage">' + msg + '</p>');

                            } catch (e) {
                                CS.Log.info('Could not populate content for ', binding.wrapper.reference, e);
                            }
                        });
                    } else {
                        populateTemplate(binding, lookupResponseCache[binding.wrapper.reference]);
                    }
                }

                jQuery(document).on('change', '.multi-lookup-quantity, .multi-lookup-selected-quantity', function(event) {
                    var elem = jQuery(this);
                    var quantity = getCurrentQuantity(elem);

                    updateAttributeValue(elem, quantity);
                });

                // expose the method to enable retrieval of data in js actions
                CS.getMultiLookupRecords = getMultiLookupRecords;

                function getCurrentQuantity(jqElem) {
                    return parseInt(jqElem.val(), 10) || 0;
                }

                function updateAttributeValue(jqElem, value) {
                    var reference = jqElem.data('ref');
                    var recordId = jqElem.data('id');
                    var maxVal = jqElem.data('max');
                    var newValue = parseInt(value, 10);

                    if (maxVal && parseInt(maxVal) != 'NaN' && parseInt(maxVal, 10) < newValue) {
                        newValue = parseInt(maxVal, 10);
                    }

                    var currentAttributeValue = CS.getAttributeValue(reference);
                    if (currentAttributeValue.length) {
                        var keysValues = deserializeValue(currentAttributeValue);
                        if (newValue === 0) {
                            delete keysValues[recordId];
                        } else {
                            keysValues[recordId] = newValue;
                        }
                        CS.setAttributeValue(reference, serializeValue(keysValues));
                    } else {
                        if (newValue === 0) {

                        } else {
                            var val = recordId + ',' + newValue;
                            CS.setAttributeValue(reference, val);
                        }
                    }
                }

                CS.updateAttributeValue = updateAttributeValue;

                function deserializeValue(currentAttributeValue) {
                    var keyValuePairs = currentAttributeValue.split('|');
                    var retArr =_.reduce(keyValuePairs, function(acc, curr) {
                        var key = curr.split(',')[0];
                        acc[key] = parseInt(curr.split(',')[1], 10) || 1;
                        return acc;
                    }, {});

                    return retArr;
                }

                function serializeValue(keysValues) {
                    var retVal = _.reduce(Object.keys(keysValues), function(acc, currKey) {
                        var val = keysValues[currKey];
                        return acc + currKey + ',' + val + '|';
                    }, '');

                    return retVal.slice(0, -1);
                }

                var handler = {
                    name: 'MultiSelect Lookup With Quantity',
                    init: function(binding) {
                        refreshData(binding, true);
                    },
                    onChange: function(binding , attrRef, event) {
                        // do nothing, prevent updateAttribute from being triggered
                    },
                    updateUI: function(binding, triggerEvent) {

                        var displayHandler = {

                            updateDisplay: function(element, value, displayValue) {
                            },
                            markRequired: CS.UI.Effects.markRequired
                        };
                        refreshData(binding, false);
                        CS.UI.Effects.processEffects(binding, displayHandler);
                    },
                    updateAttribute: function(wrapper, properties) {
                        if (properties.hasOwnProperty('value')) {
                            properties.displayValue = properties.value;
                        }
                        CS.DataBinder.applyProperties(wrapper, properties);
                    }
                };

                return handler;
            })());

            CS.params = params;

            if (typeof CS.getUserProfile !== 'function') {
                CS.getUserProfile = function getUserProfile() { return CS.params.userProfile; };
            }

            // set user language for number/date formatter
            if (typeof CS !== 'undefined' && CS['DataConverter'] instanceof Object) {
                CS.DataConverter.userLanguage = '{!userLanguage}';
            }

            launchConfigurator(CS, delegate, params, function() {
                loadPartsModelFromAttachment(params.configId);
            });
        });

        function finish() {
            var self = this;
            
            CS.Util.waitFor(
                function until() {
                    CS.Log.info('*** finish(): Waiting for rules to finish... ');
                    return (typeof CS.rulesTimer === 'undefined');
                },
                function payload() {
                    saveConfiguration(self);
                }
            );
        }

        function saveConfiguration(buttonElement) {
            var basketSpec = {
                Id: params.basketId,
                linkedId: params.linkedId,
                packageSlotId: params.packageSlotId
            };
            if (typeof buttonElement === 'undefined') {
                buttonElement = this;
            }

            if(!partsModelJS) partsModelJS = {};            
            //------ EP added 15 April
            CS.Log.warn('***** About to check pre save validation...');
            if (validateAttributesChanged && validateAttributesChanged() == true) {
                //display message to user and exit saving...
                var cont = alert('Your prices are not up to date. Please re-calculate prices before saving.');
                if (!cont) {
                    jQuery('button[data-cs-group="Finish"]').removeAttr('disabled').css({opacity: 1});
                    return;
                }
            }
           

            
            CS.indicator.start();
            CS.Log.info('Persisting configuration...');
            CS.Service.persistConfiguration(basketSpec, (function(p){
                return function(result, redirectCallback) {
                    if (result._success) {
                        CS.Log.info('Configuration persisted');  

                        // there will always be a single root configuration on BG solution    
                        var configId = JSON.parse(unescapeJsInHtml(result.rootConfigIds))[0];

                        //2019-01-29 pulled out from validateAttributesChanged()
                        saveInstallationNotes(result.basketId, configId);  

                        savePartsModel(configId, function() {
                            window.location.assign(buildAfterFinishUrl(p, result));
                        });                      
                    } else {
                        CS.markConfigurationInvalid(result._message);
                        updateFinishButtonUI(buttonElement, true);
                    }
                }
            })(params)
            );
        }

    </script>
     
    <script type="text/html" id="CS.MultiSelectLookup__tpl">
    <%  var attr = attrWrapper.attr;
        var prefix = CS.Util.configuratorPrefix;
        var isActive = attr[prefix + 'is_active__c'];
        var disabled = attrWrapper.attr[prefix + 'Is_Read_Only__c'] ? 'disabled="disabled"' : '';
    %>
        <div class="apexp">
            <div class="individualPalette">
                <div class="Custom24Block">
                    <div class="bPageBlock brandSecondaryBrd apexDefaultPageBlock secondaryPalette">
                        <div class="pbHeader">
                            <table border="0" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td class="pbTitle">
                                        <h2 class="mainTitle">
                                            <span><%= attrDefinition.Name %></span>
                                        </h2>
                                    </td>
                                    <td class="pbButton ">
                                    <% if (isActive) { %>
                                        <button data-cs-action="AddLookup" data-cs-params='{"ref":"<%= attrWrapper.reference %>"}' data-cs-control="<%= attrWrapper.reference %>" data-cs-ref="<%= attrWrapper.reference %>" data-cs-type="Add" data-role="none" class="add" <%= disabled %> >New <%= attrDefinition.Name %></button>
                                    <% } %>
                                    </td>
                                </tr>
                            </table>
                        </div>
                        <div class="pbBody">
                        <% if (records.length > 0) { %>
                            <table class="list" data-cs-binding="<%= attrWrapper.reference %>" data-cs-control="<%= attrWrapper.reference %>" data-cs-type="list">
                                <thead class="rich-table-thead">
                                    <tr class="headerRow">
                                        <th class="headerRow" style="width: 6em;">Action</th>
                        <%  for (columnName in columns) { %>
                                    <th class="headerRow">
                                        <%= columnName %>
                                    </th>
                        <%  } %>
                                    </tr>
                                </thead>
                        <%  for (var i = 0; i < records.length; i++) {
                                var record = records[i];
                                var rowClass = 'dataRow ' + (i/2 == Math.floor(i/2) ? 'even ' : 'odd ') + (i == 0 ? 'first ' : '') + (i >= records.length - 1 ? 'last' : '');
                        %>
                                <tr class="<%= rowClass %>">
                                    <td class="dataCell">
                                    <% if (isActive) { %>
                                        <span data-cs-action="clearMultiSelectLookup" data-cs-params='{"ref":"<%= attrWrapper.reference %>", "recordId":"<%= record.id %>"}' data-cs-ref="<%= attrWrapper.reference %>">Del</span>
                                    <% } %>
                                    </td>
                        <%      for (columnName in columns) {
                                    var filedName = columns[columnName].toLowerCase();
                                    var fieldValue = record[filedName];
                        %>
                                    <td><%= fieldValue %></td>
                        <%      } %>
                                </tr>
                        <%  } %>
                            </table>
                        <% } else { %>
                            <table class="list" data-cs-control="<%= attrWrapper.reference %>" data-cs-type="list">
                                <tr class="dataRow even first last">
                                    <td class="dataCell">
                                        No items to display
                                    </td>
                                </tr>
                            </table>
                        <% } %>
                        </div>
                        <div class="pbFooter secondaryPalette">
                            <div class="bg"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </script>

    <script type="text/html" id="CS.MultipleRelatedProduct__tpl">
    <%  var prefix = CS.Util.configuratorPrefix;
        var max = definition[prefix + 'Max__c'];
        var disabled = ((max && relatedProducts.length >= max) ? 'disabled="disabled"' : '');
        var prod;
        var attRef;
        var rowClass;
        var errorClass;
        var errorMessage;
        var attr = anchor.attr;
        var isReadOnly = attr[prefix + 'Is_Read_Only__c'];
        var isActive = attr[prefix + 'is_active__c'];
        var isRequired = attr[prefix + 'Is_Required__c'];
        if (max && relatedProducts.length > max) {
            errorClass = 'attributeError';
            errorMessage = '<p class="attributeErrorMessage">{!$Label.cscfga__attrcls_The_maximum_number_of} ' + max + ' {!$Label.cscfga__pchlpcls_exceeded_related_items}</p>';
        }
    %>
        <div class="apexp">
            <div class="individualPalette">
                <div class="Custom24Block <%= errorClass %>">
                    <div class="bPageBlock brandSecondaryBrd apexDefaultPageBlock secondaryPalette">
                        <div class="pbHeader">
                            <table border="0" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td class="pbTitle" data-role="fieldcontain">
                                        <h2 class="mainTitle">
                                            <span><%= definition.Name %></span>
                                            <% if (isRequired) { %><span class="required">(Required)</span><% } %>
                                            <% if (isReadOnly) { %><span class="readOnly">(Read Only)</span><% } %>
                                        </h2>
                                    </td>
                                    <td class="pbButton ">
                                    <% if (isActive && ! isReadOnly) { %>
                                        <button <%= disabled %> class="add" data-cs-control="<%= anchor.reference %>" data-cs-ref="<%= anchor.reference %>" data-cs-action="addRelatedProduct" data-cs-type="add" data-role="none">New <%= definition.Name %></button>
                                    <% } %>
                                    </td>
                                </tr>
                            </table>
                        </div>
                        <div class="pbBody">
    <% if (relatedProducts.length > 0) { %>
        <table class="list" data-cs-binding="<%= anchor.reference %>" data-cs-control="<%= anchor.reference %>" data-cs-type="list">
            <thead class="rich-table-thead">
                <tr class="headerRow">
                    <th class="headerRow" style="width: 9em;">Action</th>
                    <th class="headerRow" style="width: 6em;">Status</th>
                    <th class="headerRow">Name</th>
    <%  for (var i = 0; i < cols.length; i++) {
            var spec = colSpecs[cols[i]]; %>
                <th class="headerRow">
                    <%= spec.header %>
                </th>
    <%  } %>
                </tr>
            </thead>
    <%  for (var i = 0; i < relatedProducts.length; i++) {
            prod = relatedProducts[i];
            rowClass = 'dataRow ' + (i/2 == Math.floor(i/2) ? 'even ' : 'odd ') + (i == 0 ? 'first ' : '') + (i >= relatedProducts.length - 1 ? 'last' : '');
    %>
            <tr class="<%= rowClass %>" data-cs-ref="<%= prod.reference %>">
                <td class="dataCell">
                <% if (isActive && ! isReadOnly) { %>
                    <span data-cs-action="editRelatedProduct" data-cs-ref="<%= prod.reference %>">Edit</span> |
                    <span data-cs-action="removeRelatedProduct" data-cs-ref="<%= prod.reference %>">Del</span>
                    <% if (disabled === '') { %>
                        | <span data-cs-action="copyRelatedProduct" data-cs-ref="<%= prod.reference %>">Copy</span>
                    <% } %>
                <% } %>
                </td>
                <td class="dataCell"><%= prod.config[prefix + 'Configuration_Status__c'] %></td>
                <td class="dataCell"><span data-cs-action="editRelatedProduct" data-cs-ref="<%= prod.reference %>"><%= prod.config.Name %></span></td>
    <%      for (var j = 0; j < cols.length; j++) {
                if (colSpecs[cols[j]].ref != undefined) {
                    attRef = prod.reference + ':' + colSpecs[cols[j]].ref;
                }
                if (attRef != undefined) {
    %>
                <td><%= CS.getAttributeDisplayValue(attRef) %></td>
    <%          }
            } %>
            </tr>
    <%  } %>
        </table>
    <% } else { %>
        <table class="list" data-cs-control="<%= anchor.reference %>" data-cs-type="list">
            <tr class="dataRow even first last">
                <td class="dataCell">
                    No items to display
                </td>
            </tr>
        </table>
    <% } %>
                    </div>
                        <div class="pbFooter secondaryPalette">
                            <div class="bg"></div>
                        </div>
                    </div>
                <%= errorMessage %>
                </div>
            </div>
        </div>
    </script>
    <apex:form style="width: 0; height: 0; position: absolute; left: -1000px;">
        <!--
            Dummy input date field to enable hand-rolled
            date pickers to be built dynamically. Adding
            this control forces SF to build the DatePicker
            table at the end of the page containing the
            content for the datepicker div.

            The form is hidden due to recent changes in SFDC VF rendering engine
            which started displaying this inputField (it was previously hidden due
            to referencing the read-only SObject field)
        -->
        <apex:inputField value="{!dateRange.cscfga__Start__c}"/>
    </apex:form>

    <!-- related product selection template START -->
    <div id="rpDialogContainer" style="display: none">

            <div class="bPageTitle">
                <div class="ptBody">
                    <div class="content">
                        <img src="/s.gif" alt="Rule" class="pageTitleIcon" title="Related Product Selection" />
                        <h1 class="pageType">Related Product Selection</h1>
                        <h2 class="pageDescription">Related Product Selection</h2>
                        <div class="blank">&nbsp;</div>
                    </div>
                </div>
            </div>

            <div id="" style="display: block">
                <div class="apexp">
                    <div class="Custom24Block">
                        <div id="rpdBreadcrumb" class=""></div>
                        <br />
                    </div>
                </div>
            </div>

            <div class="apexp">
                <div class="individualPalette">
                    <div class="Custom24Block">
                        <div class="bPageBlock brandSecondaryBrd apexDefaultPageBlock secondaryPalette">
                            <div class="pbHeader">
                                <table border="0" cellpadding="0" cellspacing="0">
                                    <tr>
                                        <td class="pbTitle"><h2 class="mainTitle">{!$Label.cscfga__selcat_Select_Category}</h2></td>
                                    </tr>
                                </table>
                            </div>
                            <div class="pbBody">

                                <table class="list" data-cs-binding="" data-cs-control="" data-cs-type="list" cellpadding="0" cellspacing="0">
                                    <thead class="rich-table-thead">
                                        <tr class="headerRow">
                                            <th class="headerRow" width="50%">{!$Label.cscfga__selprodcat_Category_Name}</th>
                                            <th class="headerRow" width="50%">{!$Label.cscfga__selprodcat_Description}</th>
                                        </tr>
                                    </thead>
                                    <tbody id="rpSelectCategoryList">
                                    </tbody>
                                </table>

                            </div>
                            <div class="pbFooter secondaryPalette">
                                <div class="bg"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="apexp">
                <div class="individualPalette">
                    <div class="Custom24Block">
                        <div class="bPageBlock brandSecondaryBrd apexDefaultPageBlock secondaryPalette">
                            <div class="pbHeader">
                                <table border="0" cellpadding="0" cellspacing="0">
                                    <tr>
                                        <td class="pbTitle"><h2 class="mainTitle">Select Product</h2></td>
                                    </tr>
                                </table>
                            </div>
                            <div class="pbBody">
                                <table class="list" data-cs-binding="" data-cs-control="" data-cs-type="list" cellspacing="0" cellpadding="0">
                                    <thead class="rich-table-thead">
                                        <tr class="headerRow">
                                            <th class="headerRow" width="50%">{!$Label.cscfga__selcat_Product_Name}</th>
                                            <th class="headerRow" width="50%">{!$Label.cscfga__selcat_prod_Description}</th>
                                        </tr>
                                    </thead>
                                    <tbody id="rpSelectProductDefinitionList">
                                    </tbody>
                                </table>
                            </div>
                            <div class="pbFooter secondaryPalette">
                                <div class="bg"></div>
                            </div>
                        </div>
                    </div>
                    <div id="" class="">
                        <input id="rpCancelButton" type="button" value="{!$Label.cscfga__selcat_Cancel}" class="pbButtonb CS_configButtons"></input>
                    </div>
                </div>
            </div>
    </div>
    <!-- related product selection template END -->

    <script type="text/html" id="CS.NumericKeypad__tpl">
        <input type="text" id="<%= ref %>" />
    </script>

    <!-- Miguel.20180129.MultiSelectLookupWithQuantity.Template.START -->
    <script type="text/html" id="CS.MultiSelectLookupWithQuantity__tpl">
        <div class="apexp">
            <div class="individualPalette">
                <div class="Custom24Block">
                    <div class="bPageBlock brandSecondaryBrd apexDefaultPageBlock secondaryPalette">
                        <!-- Available records-->
                        <div class="pbHeader">
                            <table border="0" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td class="pbTitle">
                                        <h2 class="mainTitle">
                                            <span> Flue Parts Available </span>
                                        </h2>
                                    </td>
                                </tr>
                            </table>
                        </div>
                        <div id="bodycontent1" class="pbBody">
                            <table id="contenttable1" class="list" data-cs-type="list">
                                <thead id="thead001" class="rich-table-thead">
                                    <tr class="headerRow">
                                        <% for(var columnApiName in columnNames) { %>
                                            <th class="headerRow"> <%=columnNames[columnApiName]%> </th>
                                        <% } %>
                                            <th class="headerRow" width="100"> Quantity </th>
                                    </tr>
                                </thead>
                                <tbody id="tbody001">
                                <% if (availableRecords && Object.keys(availableRecords).length) {
                                       for (var key in availableRecords) { %>
                                        <tr>
                                            <% for(var columnApiName in columnNames) { %>
                                            <td class="dataCell"><%=availableRecords[key][columnApiName]%></td>
                                            <% } %>
                                            <td class="dataCell">
                                                <div >
                                                   <input type="button" 
                                                           class="decrease" 
                                                           onclick="(function decreaseQty() { var tqty = parseInt(window.jQuery('.multi-lookup-quantity[data-id=<%=key%>]')[0].value,10); var min = <%=availableRecords[key]['Quantity__c']%>; console.log('decreaseButton> Current minimum is: ' + min); console.log('decreaseButton> Current quantity is: ' + tqty); if (!isNaN(tqty) && tqty> 0) { if (min < tqty && min > -1) { tqty--; window.jQuery('.multi-lookup-quantity[data-id=<%=key%>]')[0].value = (tqty==0 ? '' : tqty); var elem = window.jQuery('.multi-lookup-quantity[data-id=<%=key%>]'); CS.updateAttributeValue(elem, tqty); } } console.log('decreaseButton> New quantity is: ' + window.jQuery('.multi-lookup-quantity[data-id=<%=key%>]')[0].value); })();" value="-"  
                                                            <% if (availableRecords[key]['Type__c'] == 'Requires') { %>
                                                            <%='disabled'%>
                                                            <% } %>
                                                           />
                                                    <input type="text"
                                                           data-ref="<%=attributeReference%>"
                                                           data-id="<%=availableRecords[key]['Part__c']%>"
                                                           class="multi-lookup-quantity"
                                                           style="width: 2rem; text-align: center;"
                                                            <% if (quantitiesById && quantitiesById[key]) { %>
                                                            value="<%=quantitiesById[key]%>"
                                                            <% } else { %>
                                                            value="<%=availableRecords[key]['Quantity__c']%>"
                                                            <% } %>
                                                            />
                                                    <input type="button" 
                                                           class="increase" 
                                                           onclick="(function increaseQty(){ var tqty = parseInt(window.jQuery('.multi-lookup-quantity[data-id=<%=key%>]')[0].value, 10); console.log('increaseButton> Current quantity is: ' + tqty); if (isNaN(tqty)) { window.jQuery('.multi-lookup-quantity[data-id=<%=key%>]')[0].value = 1; var elem = window.jQuery('.multi-lookup-quantity[data-id=<%=key%>]'); CS.updateAttributeValue(elem, tqty);} else if (!isNaN(tqty) && tqty< 99) { tqty++; window.jQuery('.multi-lookup-quantity[data-id=<%=key%>]')[0].value = tqty; var elem = window.jQuery('.multi-lookup-quantity[data-id=<%=key%>]'); CS.updateAttributeValue(elem, tqty); } console.log('increaseButton> New quantity is: ' + window.jQuery('.multi-lookup-quantity[data-id=<%=key%>]')[0].value); })();" 
                                                           value="+"/> 
                                                </div>
                                            </td>
                                        </tr>
                                    <% } %>
                                <% } else { %>
                                <tr>
                                    <td class="dataCell" colspan="<%=Object.keys(columnNames).length + 1%>">No data available.</td>
                                </tr>
                                <% } %>
                                </tbody>
                            </table>
                        </div>
                        <!-- Selected records -->
                        <div class="pbHeader">
                            <table border="0" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td class="pbTitle">
                                        <h2 class="mainTitle">
                                            <button onclick="(function hideUnhide() { var x = document.getElementById('bodycontent2'); if (CS.getAttributeValue('Boiler_0:Flue_0:isToggled_0') == true) { CS.setAttributeValue('Boiler_0:Flue_0:isToggled_0', false); x.style.display = 'none'; } else { CS.setAttributeValue('Boiler_0:Flue_0:isToggled_0', true); x.style.display = 'block'; } })();"> + </button>
                                            <span> Parts Ordered </span>
                                        </h2>
                                    </td>
                                </tr>
                            </table>
                        </div>
                        <div id="bodycontent2" class="pbBody" style="<%=collapsed%>" >
                            <table id="contenttable2" class="list" data-cs-type="list">
                                <thead id="thead002" class="rich-table-thead">
                                <tr class="headerRow">
                                    <% for(var columnApiName in columnNames) { %>
                                    <th class="headerRow"> <%=columnNames[columnApiName]%> </th>
                                    <% } %>
                                    <th class="headerRow" width="100"> Quantity </th>
                                </tr>
                                </thead>
                                <tbody id="tbody002">
                                <% if (selectedRecords && Object.keys(selectedRecords).length) {
                                        for(var key in selectedRecords) { %>
                                            <tr>
                                                <% for(var columnApiName in columnNames) { %>
                                                <td class="dataCell"><%=selectedRecords[key][columnApiName]%></td>
                                                <% } %>
                                                <td class="dataCell">
                                                    <div align="center">
                                                        <% if (quantitiesById && quantitiesById[key]) { %>
                                                        <%=quantitiesById[key]%>
                                                        <% } else { %> 0
                                                        <% } %>
                                                    </div >
                                                </td>
                                            </tr>
                                        <% } %>
                                <% } else { %>
                                    <tr>
                                        <td class="dataCell" colspan="<%=Object.keys(columnNames).length + 2%>">No selected items.</td>
                                    </tr>
                                <% } %>
                                </tbody>
                            </table>
                        </div>
                        <div class="pbFooter secondaryPalette">
                            <div class="bg"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </script>
    <!-- Miguel.20180129.MultiSelectLookupWithQuantity.Template.END -->

    <script type="text/html" id="CS.MultiSelectLookupWithQuantityOptional__tpl">
        <div id="multiSelectOptionalId" class="apexp">
            <div class="individualPalette">
                <div class="Custom24Block">
                    <div class="bPageBlock brandSecondaryBrd apexDefaultPageBlock secondaryPalette">
                        <!-- Available records-->
                        <div class="pbHeader">
                            <table border="0" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td class="pbTitle">
                                        <h2 class="mainTitle">
                                            <span> Optional Parts Available </span>
                                        </h2>
                                    </td>
                                </tr>
                            </table>
                        </div>
                        <div id="bodycontent1" class="pbBody">
                            <table id="contenttable1" class="list" data-cs-type="list">
                                <thead id="thead001" class="rich-table-thead">
                                    <tr class="headerRow">
                                        <% for(var columnApiName in columnNames) { %>
                                            <th class="headerRow"> <%=columnNames[columnApiName]%> </th>
                                        <% } %>
                                            <th class="headerRow" width="100"> Quantity </th>
                                    </tr>
                                </thead>
                                <tbody id="tbody001">
                                <% if (availableRecords && Object.keys(availableRecords).length) {
                                       for (var key in availableRecords) { %>
                                        <tr>
                                            <% for(var columnApiName in columnNames) { %>
                                            <td class="dataCell"><%=availableRecords[key][columnApiName]%></td>
                                            <% } %>
                                            <td class="dataCell">
                                                <div >
                                                   <input type="button" 
                                                           class="decrease" 
                                                           onclick="(function decreaseQty() { var tqty = parseInt(window.jQuery('.multi-lookup-quantity[data-id=<%=key%>]')[0].value,10); var min = 0; if (!isNaN(tqty) && tqty> 0) { if (min < tqty && min > -1) { tqty--; window.jQuery('.multi-lookup-quantity[data-id=<%=key%>]')[0].value = (tqty==0 ? '' : tqty); var elem = window.jQuery('.multi-lookup-quantity[data-id=<%=key%>]'); CS.updateAttributeValue(elem, tqty); } } })();" value="-"  
                                                           <% if (quantitiesById[key] == 0) { %>
                                                            <%='disabled'%>
                                                            <% } %>
                                                           />
                                                    <input type="text"
                                                           data-ref="<%=attributeReference%>"
                                                           data-id="<%=availableRecords[key]['Part_2__c']%>"
                                                           data-max="<%=availableRecords[key]['Quantity__c']%>"
                                                           class="multi-lookup-quantity"
                                                           style="width: 2rem; text-align: center;"
                                                            <% if (quantitiesById && quantitiesById[key]) { %>
                                                                <% if (quantitiesById[key] > availableRecords[key]['Quantity__c']) { %>
                                                                    value="<%=availableRecords[key]['Quantity__c']%>"
                                                                <% } else { %>
                                                                    value="<%=quantitiesById[key]%>"
                                                                <% } %>
                                                            <% } else { %>
                                                                value="0"
                                                            <% } %>
                                                            />
                                                    <input type="button" 
                                                           class="increase" 
                                                           onclick="(function increaseQty(){ var tqty = parseInt(window.jQuery('.multi-lookup-quantity[data-id=<%=key%>]')[0].value, 10); var max = <%=availableRecords[key]['Quantity__c']%>; if (isNaN(tqty)) { window.jQuery('.multi-lookup-quantity[data-id=<%=key%>]')[0].value = 1; var elem = window.jQuery('.multi-lookup-quantity[data-id=<%=key%>]'); CS.updateAttributeValue(elem, tqty);} else if (!isNaN(tqty) && tqty < max) { tqty++; window.jQuery('.multi-lookup-quantity[data-id=<%=key%>]')[0].value = tqty; var elem = window.jQuery('.multi-lookup-quantity[data-id=<%=key%>]'); CS.updateAttributeValue(elem, tqty); } })();" 
                                                           value="+"
                                                           <% if (availableRecords[key]['Quantity__c'] <= quantitiesById[key]) { %>
                                                            <%='disabled'%>
                                                            <% } %>
                                                           /> 
                                                </div>
                                            </td>
                                        </tr>
                                    <% } %>
                                <% } else { %>
                                <tr>
                                    <td class="dataCell" colspan="<%=Object.keys(columnNames).length + 1%>">No data available.</td>
                                </tr>
                                <% } %>
                                </tbody>
                            </table>
                        </div>
                        <!-- Selected records -->
                        <!--
                        <div class="pbHeader">
                            <table border="0" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td class="pbTitle">
                                        <h2 class="mainTitle">
                                            <button onclick="(function hideUnhide() { var x = document.getElementById('bodycontent2'); if (CS.getAttributeValue('Boiler_0:isToggled_0') == true) { CS.setAttributeValue('Boiler_0:isToggled_0', false); x.style.display = 'none'; } else { CS.setAttributeValue('Boiler_0:isToggled_0', true); x.style.display = 'block'; } })();"> + </button>
                                            <span> Parts Ordered </span>
                                        </h2>
                                    </td>
                                </tr>
                            </table>
                        </div>
                        <div id="bodycontent2" class="pbBody" style="<%=collapsed%>" >
                            <table id="contenttable2" class="list" data-cs-type="list">
                                <thead id="thead002" class="rich-table-thead">
                                <tr class="headerRow">
                                    <% for(var columnApiName in columnNames) { %>
                                    <th class="headerRow"> <%=columnNames[columnApiName]%> </th>
                                    <% } %>
                                    <th class="headerRow" width="100"> Quantity </th>
                                </tr>
                                </thead>
                                <tbody id="tbody002">
                                <% if (selectedRecords && Object.keys(selectedRecords).length) {
                                        for(var key in selectedRecords) { %>
                                            <tr>
                                                <% for(var columnApiName in columnNames) { %>
                                                <td class="dataCell"><%=selectedRecords[key][columnApiName]%></td>
                                                <% } %>
                                                <td class="dataCell">
                                                    <div align="center">
                                                        <% if (quantitiesById && quantitiesById[key]) { %>
                                                            <% if (quantitiesById[key] > availableRecords[key]['Quantity__c']) { %>
                                                                    <%=availableRecords[key]['Quantity__c']%>
                                                                <% } else { %>
                                                                    <%=quantitiesById[key]%>
                                                                <% } %>
                                                        <% } else { %>
                                                            0
                                                        <% } %>
                                                    </div >
                                                </td>
                                            </tr>
                                        <% } %>
                                <% } else { %>
                                    <tr>
                                        <td class="dataCell" colspan="<%=Object.keys(columnNames).length + 2%>">No selected items.</td>
                                    </tr>
                                <% } %>
                                </tbody>
                            </table>
                        </div>
                        -->
                        <div class="pbFooter secondaryPalette">
                            <div class="bg"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </script>

</apex:page>